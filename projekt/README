Interpreter Scheme - Dokumentacja

1. Lisp Values
symbol: 'ala, 'Ola12, 'a->b, 'str?, 'do-this!
string: "ala", "ma \nkota \"Mruczka\""
integer: 666, #d98, #b101, #o76, #xABCDE
real: 6.66, 0.0000000000001
bool: #t, #f
char: #\a, #\newline
list: '(), '(1 2 3), '(1 (2 (3)))
dottedlist: '(1 . 2), '(1 . (2 3 . 4))
vector: '#(1 2 3)

2. Quoted Forms
quote: '(1 2 3) => (1 2 3)
quasiquote: 
  unquote: `(1 ,(+ 2 3)) => (1, 5)
  unquote-splicing: `(1 ,@'(2 3)) => (1 2 3)

3. Special Forms
(apply + 1 2 3)
=> 6
(apply + (list 3 4))
=> 7
(eval '(+ 1 2))
=> 3
(and (= 2 2) (> 2 1)) 
=> #t
(or (= 1 2) #f)
=> #f
(if (= 1 1) 'yes 'no)
=> yes
(cond ((even? 1) (+ 1 2)) (else 3))
=> 3
(case (car '(c d)) ((a e i o u) 'vowel) (else 'consonant))  
=> consonant
(define x 666)
x
=> 666
(set! x (/ x 2))
x
=> 333
(define v '#(1 2 3))
=> #(1 2 3)
(vector-set! v 1 666)
=> #(1 666 3)
(define (fact x) (if (= x 1) 1 (* x (fact (- x 1)))))
(fact 3)
=> 6
(define plus (lambda (a b) (+ a b)))
(plus 1 2)
=> 3
(define plus666 (let ((x 666)) (lambda (y) (+ x y))))
(plus666 1)
=> 667
(let ((x 2) (y 3)) (let* ((x 7) (z (+ x y))) (* z x))) 
=> 70
(define x 0)
(begin (set! x 5) (+ x 1))
=> 6
(let ((x '(1 3 5 7 9))) (do ((x x (cdr x)) (sum 0 (+ sum (car x)))) ((null? x) sum)))  
=> 25

4. Primitive Functions
integer -> integer -> integer: +, -, *, /, mod, quotient, remainder, gcd, lcm
integer -> integer -> bool: =, <, >, /=, >=, <=
real -> real -> real: sqrt, exp, log, sin, cos, tan
bool -> bool -> bool: &&, ||
string -> string -> bool: string=?, string<?, string>?, string<=?, string>=?
char -> char -> bool: char=?, char<?, char>?, char>=?, char<=?
char -> bool: char-alphabetic?, char-numeric?, char-oct-digit?, char-hex-digit?, char-whitespace?, char-upper-case?, char-lower-case?, char-alphanumeric?, char-control?, char-printable?
char -> char: char-upcase, char-downcase, string-upcase, string-downcase

symbol?, string?, integer?, real?, number?, bool?, char?, list?, pair?, vector?, procedure?, port?
symbol->string, string->symbol, string->number, number->string, char->string, string->char, char->integer, integer->char
null?, zero?, positive?, negative?, even?, odd?, eqv?, car, cdr, cons, not
list, length, list-ref, list->vector, vector->list, vector, vector-length, vector-ref

5. Primitive IO Functions
open-input-file, open-output-file, close-input-port, close-output-port, read, write, read-contents, read-all

